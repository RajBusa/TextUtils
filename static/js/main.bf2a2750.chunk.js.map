{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","modeText","TextForm","useState","text","setText","heading","rows","value","onChange","event","target","style","backgroundColor","color","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","Mode","setMode","setModeText","setAlert","massage","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf2a2750.chunk.js","sourcesContent":["// Just Write rfc and click Enter\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types' // impt\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                            {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className=\"form-check form-switch mx-6\">\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">{props.modeText}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}  // isRequired: when title not pass it will give error\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutText: 'About text here'\r\n}   // When Props are not pass it print\r\n\r\n","// Just Write rfc and click Enter\r\nimport React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('Enter text here ');    // Search React Hooks\r\n    const handleUpclick = () =>{\r\n        // console.log(\"Uppercase is clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Connvert to Uppercase\", \"success\");\r\n    }\r\n\r\n    // const handleLowclick = () =>{\r\n    //     // console.log(\"Uppercase is clicked \" + text);\r\n    //     let newText = text.toLowerCase();\r\n    //     setText(newText);\r\n    // }\r\n    \r\n    function handleLowclick(){\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Connvert to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    // text = \"Enter text here2\"; // Wrong way to change the state\r\n    // setText(\"Enter text here2\");\r\n\r\n    return (\r\n        <>\r\n            <div className = \"container my-3\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style = {{backgroundColor: props.mode === 'light' ? 'white' : 'gray',\r\n                                               color: props.mode === 'light' ? 'Black' : 'White ' \r\n                }}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleUpclick}>Convert to  Uppercase</button>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleLowclick}>Convert to Lowercase</button>\r\n            </div>  \r\n            <div className=\"container my-3\">\r\n                <h1>Your text summary</h1>\r\n                <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n                <p>{text.length === 0 ? 0 : text.split(\" \").length - 1} Words and {text.length} Characters</p>\r\n                <p>{0.08*text.split(\" \").length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0 ? text : \"Enter something is the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport React, { useState } from 'react'\nimport './App.css'\nimport Navbar from './component/Navbar'\nimport TextForm from './component/TextForm'\nimport Alert from './component/Alert'\n// import About from './component/About';\n// import {\n  // BrowserRouter as Router,\n  // Switch,\n  // Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [modeText, setModeText] = useState('Enable Dark Mode');\n  const [alert, setAlert] = useState(null);  \n\n  const showAlert = (massage, type)=>{\n    setAlert({\n      msg: massage, \n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(Mode === 'light'){\n      setMode('dark');\n      setModeText('Enable Light Mode');\n      document.body.style.backgroundColor = 'rgb(0 49 98)';\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode is enabled\", \"success\");\n      document.title = 'TextUtil - DarkMode';\n      // setInterval(() => {\n        // document.title = 'TextUtil is Amazing DarkMode';\n      // }, 2000);\n    }\n    else{\n      setMode('light');\n      setModeText('Enable Dark Mode');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light mode is enabled\", \"success\");\n      document.title = 'TextUtil - LightMode';\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtil\" aboutText=\"AboutTextutils\" mode={Mode} toggleMode={toggleMode} modeText={modeText}/>\n      {/* <Navbar title = \"TextUtil\"/> */}\n      {/* <Navbar/> */}\n      <Alert alert = {alert}/>\n      <div className=\"container\">\n      {/* <Switch> */}\n        {/* ------> USe exact before path <------\n            /user      ---> Component1\n            /user/home ---> Component2\n            if we not write exact and search /user/home than open /user link */}\n        {/* <Route exact path=\"/\"> */}\n          <TextForm heading=\"Enter the Text to analyze below\" mode={Mode} showAlert={showAlert}/> \n        {/* </Route> */}\n\n        {/* <Route exact path=\"/about\">\n          <About />\n        </Route>  */}\n      {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}